import java.math.*;
public class bootleg3 //Elliptic Curve Method
{
    public static void main ()
    {
        BigInteger c = new BigInteger("4569014873013033472738321466057452788080653645579196006881455690323718974250137519633123425797803225921583783607027728674482214090355754475146011291858030738986601597939323867092545180754411823170605325536107285029300642245733510048450502428742367834617837052234336609836128778284069523047636579731929314388411686072851964744325529952756732556");
        BigInteger n = new BigInteger("6927197300299946510539278194622985256255445180851357191715796960173008714341246529683173483150844976643861562597102436654033599978875936626274604886327581070982431473039803608893408285054773611051172079531381141524349498833115247502487763024058622421941692165037578901500885201991690226995760943741441797936624935463548635828338399434556692961");
        BigInteger e = new BigInteger("65537");
        BigInteger phi = new BigInteger("6927197280541049583146271317094395491689839219181019777197436662096533516366717498482022698889546669326532105392146646149285542400742154302791204642206011860251868397707226305337742255525079061294439716458742371514526535853696474275502133339708136848363297218556582374123649481461507273482722797401661578144823253469500077506560000000000000000");
        BigInteger d = e.modInverse(phi);
        BigInteger m = c.modPow(d,n);
        System.out.println(m.toString(16));
    }
}
