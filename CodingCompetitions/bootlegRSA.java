import java.math.*;
import java.util.*;
public class bootlegRSA
{
    public static void main ()
    {
        /*
         * c: 72963920847314675288786553111038781709685912398547789252636141132143411260564796534628673203519856001406115844637957382205215706259397122302827998239504639424797073388992325990823904237052049021895856391161751823390606387909828059591945900797339270849206849748590120198704083224724359648584268681284227896294
        n: 78339389067717309543480599377709229934632672179803130748805972195559577549376835891728340613533216758617962548196227072456676627537112757948369183613850298579363715875964657074161282825906318411286008614246775331135593025822208825555823274652315534791964963411687048852364575217595821936202203337632149245609
        e: 5294187316796923325267796430167297547652289623942934008063561817814873567087141708721253956960779666812929431099395604069619005803773019896445170121087979203380066929666981905282872364649842819448913467074678058497122338659773711187317334155313684106462871803270517586049044917923012705295628880438090498373
         */
        /*
         * n=pq , where p and q are distinct primes.
        ϕ=(p−1)(q−1)
        e<n such that gcd(e,ϕ)=1
        d=e−1modϕ
        c=m^emodn,1<m<n
        m=c^dmodn
         */

        BigInteger c = new BigInteger("72963920847314675288786553111038781709685912398547789252636141132143411260564796534628673203519856001406115844637957382205215706259397122302827998239504639424797073388992325990823904237052049021895856391161751823390606387909828059591945900797339270849206849748590120198704083224724359648584268681284227896294");
        BigInteger n = new BigInteger("78339389067717309543480599377709229934632672179803130748805972195559577549376835891728340613533216758617962548196227072456676627537112757948369183613850298579363715875964657074161282825906318411286008614246775331135593025822208825555823274652315534791964963411687048852364575217595821936202203337632149245609");
        BigInteger e = new BigInteger("5294187316796923325267796430167297547652289623942934008063561817814873567087141708721253956960779666812929431099395604069619005803773019896445170121087979203380066929666981905282872364649842819448913467074678058497122338659773711187317334155313684106462871803270517586049044917923012705295628880438090498373");
        //System.out.println(NthRoot(c.modInverse(n),e));
        System.out.println(c.modPow(new BigInteger("65537"),n).toString(16));
        //M^(ed) mod N = M mod N
    }
    public static BigInteger one = new BigInteger("1");
    public static BigDecimal NthRoot(BigInteger num,BigInteger n)
    {
        ArrayList<BigDecimal> arr = new ArrayList<BigDecimal>();
        Integer i = 1;
        Integer j = 0;
        BigDecimal[] tArray = new BigDecimal[5];
        BigDecimal N = new BigDecimal(n);
        BigDecimal A = new BigDecimal(num);
        arr.add(0,A);

        while(true)
        {
            tArray[0] = (arr.get(i-1).multiply(new BigDecimal(n.subtract(one))));
            tArray[1] = pow(arr.get(i-1),n.subtract(one));
            tArray[2] = A.divide(tArray[1],6,RoundingMode.FLOOR);
            tArray[3] = tArray[0].add(tArray[2]);
            tArray[4] = tArray[3].divide(N,6,RoundingMode.FLOOR);

            arr.add(i,tArray[4]);
            i = i + 1;

            if ((arr.get(i-1)).compareTo(arr.get(i-2)) == 0)
            {
                break;
            }
        }

        return arr.get(i-1);
    }

    public static BigDecimal pow(BigDecimal base, BigInteger exponent) {
        BigDecimal result = BigDecimal.ONE;
        while (exponent.signum() > 0) {
            if (exponent.testBit(0)) result = result.multiply(base);
            base = base.multiply(base);
            exponent = exponent.shiftRight(1);
        }
        return result;
    }
}
