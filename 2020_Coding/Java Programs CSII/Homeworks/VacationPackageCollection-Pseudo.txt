	/**
	 * Produces a summary of flight information
	 * inside a VacationPackage for detail display elsewhere.
	 * In addition to properly extracting flight details
	 * when the given index corresponds to a FlightOptionalPackage
	 * with one or more flight legs, this method will also detect
	 * various error conditions. In erroneous situations,
	 * one of the following strings will be produced:
	 * 
	 * ERROR: Index is out of range!
	 * ERROR: No flights are allowed for this type of trip!
	 * ERROR: The selected trip has no flight information.
	 * 
	 * Each of these errors corresponds to invalid range
	 * input, packages for which flights cannot
	 * be added in the first place, and packages
	 * which potentially could (but do not yet) have flight data.
	 * @param index - The index position in the collection
	 * from which to extract flight information.
	 * @return - The formatted flight details,
	 * with one Flight per line and each Flight
	 * displayed as detailed in Flight.toString.
	 */
	public java.lang.String getFlightDetails(int index)
	
	{
		String g = null;
		if (index < 0 || index >= MAX_FLIGHTS)
		{
			g =  "Index is out of range!";
		}
		else if (vacaPack[index].toString().contains("road"))
		{
			g = "No flights are allowed for this type of trip!";
		
		}
		else if (vacaPack[index].toString().contains("Cruis"))
		{
			g = "The selected trip has no flight information.";
		}
		
		if (g != null)
		{
			return "ERROR: " + g;
		}
		
//	 	The formatted flight details,
//	 	with one Flight per line and each Flight
//   	displayed as detailed in Flight.toString.
		g = "";
		Flight[] temp = SOMETHING;
		for (int i = 0; i < temp.length - 1; i++)
		{
		g += temp[i].toString() + "\n";
		}
		g += temp[temp.length - 1];
		return g;
	}